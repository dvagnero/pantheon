// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Search tests should render default Search component 1`] = `
<Fragment>
  <Toolbar
    className="pf-m-toggle-group-container filters-bar__filters-wrapper"
    clearAllFilters={[Function]}
    collapseListedFiltersBreakpoint="xl"
    id="toolbar-with-filter"
  >
    <ToolbarContent
      isExpanded={false}
      showClearFiltersButton={false}
    >
      <ToolbarToggleGroup
        breakpoint="xl"
        toggleIcon={
          <FilterIcon
            color="currentColor"
            noVerticalAlign={false}
            size="sm"
          />
        }
      >
        <ToolbarItem
          id="filters-bar__toolbar-toggle"
        >
          <Button
            aria-expanded={true}
            icon={
              <FilterIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            }
            onClick={[Function]}
            variant="tertiary"
          />
        </ToolbarItem>
        <ToolbarItem>
          <InputGroup>
            <SearchInput
              aria-label="search input"
              className="filters-bar__name-search"
              id="textInput"
              name="textInput"
              onChange={[Function]}
              onClear={[Function]}
              placeholder="Find by name"
              type="search"
              value=""
            />
            <Button
              aria-label="search button for search input"
              variant="control"
            >
              <SearchIcon
                color="currentColor"
                noVerticalAlign={false}
                size="sm"
              />
            </Button>
          </InputGroup>
        </ToolbarItem>
        <ForwardRef
          variant="filter-group"
        >
          <ToolbarFilter
            categoryName="Status"
            chips={Array []}
            className="dropdown-filter filters-bar__dropdown-filter filters-bar__dropdown-filter--status"
            deleteChip={[Function]}
            deleteChipGroup={[Function]}
            showToolbarItem={true}
          >
            <Select
              aria-label="Status"
              aria-labelledby=""
              chipGroupComponent={null}
              className=""
              clearSelectionsAriaLabel="Clear all"
              createText="Create"
              customBadgeText={null}
              customContent={null}
              direction="down"
              favorites={Array []}
              favoritesLabel="Favorites"
              hasInlineFilter={false}
              inlineFilterPlaceholderText={null}
              inputIdPrefix=""
              isCreatable={false}
              isDisabled={false}
              isGrouped={false}
              isOpen={false}
              isPlain={false}
              menuAppendTo="inline"
              noResultsFoundText="No results found"
              onClear={[Function]}
              onCreateOption={[Function]}
              onFilter={null}
              onSelect={[Function]}
              onToggle={[Function]}
              ouiaSafe={true}
              placeholderText="Status"
              removeSelectionAriaLabel="Remove"
              selections={Array []}
              toggleAriaLabel="Options menu"
              toggleIcon={null}
              toggleId={null}
              typeAheadAriaLabel=""
              variant="checkbox"
              width=""
            >
              <SelectOption
                className="dropdown-filter__option dropdown-filter__option--status dropdown-filter__option--draft"
                component="button"
                index={0}
                inputId=""
                isChecked={false}
                isDisabled={false}
                isFavorite={null}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key="statusDraft"
                keyHandler={[Function]}
                label="Draft"
                onClick={[Function]}
                sendRef={[Function]}
                value="draft"
              />
              <SelectOption
                className="dropdown-filter__option dropdown-filter__option--status dropdown-filter__option--published"
                component="button"
                index={0}
                inputId=""
                isChecked={false}
                isDisabled={false}
                isFavorite={null}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key="statusPublished"
                keyHandler={[Function]}
                label="Published"
                onClick={[Function]}
                sendRef={[Function]}
                value="published"
              />
            </Select>
          </ToolbarFilter>
          <ToolbarFilter
            categoryName="Content Type"
            chips={Array []}
            className="dropdown-filter filters-bar__dropdown-filter filters-bar__dropdown-filter--content-type"
            deleteChip={[Function]}
            deleteChipGroup={[Function]}
            showToolbarItem={true}
          >
            <Select
              aria-label="Content Type"
              aria-labelledby=""
              chipGroupComponent={null}
              className=""
              clearSelectionsAriaLabel="Clear all"
              createText="Create"
              customBadgeText={null}
              customContent={null}
              direction="down"
              favorites={Array []}
              favoritesLabel="Favorites"
              hasInlineFilter={false}
              inlineFilterPlaceholderText={null}
              inputIdPrefix=""
              isCreatable={false}
              isDisabled={false}
              isGrouped={false}
              isOpen={false}
              isPlain={false}
              menuAppendTo="inline"
              noResultsFoundText="No results found"
              onClear={[Function]}
              onCreateOption={[Function]}
              onFilter={null}
              onSelect={[Function]}
              onToggle={[Function]}
              ouiaSafe={true}
              placeholderText="Content Type"
              removeSelectionAriaLabel="Remove"
              selections={Array []}
              toggleAriaLabel="Options menu"
              toggleIcon={null}
              toggleId={null}
              typeAheadAriaLabel=""
              variant="checkbox"
              width=""
            >
              <SelectOption
                className="dropdown-filter__option dropdown-filter__option--content-type dropdown-filter__option--concept"
                component="button"
                index={0}
                inputId=""
                isChecked={false}
                isDisabled={false}
                isFavorite={null}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key="ctypeConcept"
                keyHandler={[Function]}
                label="Concept"
                onClick={[Function]}
                sendRef={[Function]}
                value="CONCEPT"
              />
              <SelectOption
                className="dropdown-filter__option dropdown-filter__option--content-type dropdown-filter__option--procedure"
                component="button"
                index={0}
                inputId=""
                isChecked={false}
                isDisabled={false}
                isFavorite={null}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key="ctypeProcedure"
                keyHandler={[Function]}
                label="Procedure"
                onClick={[Function]}
                sendRef={[Function]}
                value="PROCEDURE"
              />
              <SelectOption
                className="dropdown-filter__option dropdown-filter__option--content-type dropdown-filter__option--reference"
                component="button"
                index={0}
                inputId=""
                isChecked={false}
                isDisabled={false}
                isFavorite={null}
                isNoResultsOption={false}
                isPlaceholder={false}
                isSelected={false}
                key="ctypeReference"
                keyHandler={[Function]}
                label="Reference"
                onClick={[Function]}
                sendRef={[Function]}
                value="REFERENCE"
              />
            </Select>
          </ToolbarFilter>
        </ForwardRef>
      </ToolbarToggleGroup>
      <ForwardRef
        variant="icon-button-group"
      />
    </ToolbarContent>
  </Toolbar>
  <Divider />
  <Drawer
    isExpanded={true}
    isInline={true}
    onExpand={[Function]}
    position="left"
  >
    <DrawerContent
      panelContent={
        <DrawerPanelContent
          widths={
            Object {
              "lg": "width_25",
            }
          }
        >
          <DrawerHead>
            <span
              className="pf-c-title pf-m-2xl"
              tabIndex={0}
            >
              Filters
            </span>
            <DrawerActions>
              <DrawerCloseButton
                onClick={[Function]}
              />
            </DrawerActions>
            <ExpandableSection
              className="filters-drawer filters-drawer--by-repo"
              isActive={true}
              isExpanded={true}
              onToggle={[Function]}
              toggleText="By repository"
              toggleTextCollapsed=""
              toggleTextExpanded=""
            >
              <SearchInput
                className="filters-drawer__repo-search"
                onChange={[Function]}
                onClear={[Function]}
                placeholder="Filter"
                value=""
              />
              <SimpleList
                aria-label="Repository List"
                className=""
              >
                <SimpleListItem
                  className="repo-list filters-drawer__repo-list"
                  component="button"
                  componentClassName=""
                  href=""
                  isCurrent={false}
                  onClick={[Function]}
                  type="button"
                >
                  <Checkbox
                    aria-label="uncontrolled checkbox"
                    className=""
                    id=""
                    isChecked={false}
                    isDisabled={false}
                    isValid={true}
                    label=""
                    onChange={[Function]}
                  />
                </SimpleListItem>
              </SimpleList>
            </ExpandableSection>
            <br />
          </DrawerHead>
        </DrawerPanelContent>
      }
    >
      <DrawerContentBody
        className="search-results"
      >
        <ExpandableSection
          className="pf-c-title search-results__section search-results__section--module"
          isActive={true}
          isExpanded={true}
          onToggle={[Function]}
          toggleText="Modules"
          toggleTextCollapsed=""
          toggleTextExpanded=""
        >
          <SearchResults
            contentType="module"
            filters={
              Object {
                "ctype": Array [],
                "status": Array [],
              }
            }
            keyWord=""
            onGetdocumentsSelected={[Function]}
            productsSelected={Array []}
            repositoriesSelected={Array []}
            userAuthenticated={true}
          />
        </ExpandableSection>
        <br />
        <ExpandableSection
          className="pf-c-title search-results__section search-results__section--assembly"
          isActive={true}
          isExpanded={true}
          onToggle={[Function]}
          toggleText="Assemblies"
          toggleTextCollapsed=""
          toggleTextExpanded=""
        >
          <SearchResults
            contentType="assembly"
            filters={
              Object {
                "ctype": Array [],
                "status": Array [],
              }
            }
            keyWord=""
            onGetdocumentsSelected={[Function]}
            productsSelected={Array []}
            repositoriesSelected={Array []}
            userAuthenticated={true}
          />
        </ExpandableSection>
        <Modal
          actions={
            Array [
              <Button
                form="bulk_edit_metadata"
                onClick={[Function]}
                variant="primary"
              >
                Save
              </Button>,
              <Button
                onClick={[Function]}
                variant="secondary"
              >
                Cancel
              </Button>,
            ]
          }
          appendTo={[Function]}
          aria-describedby=""
          aria-label="Edit metadata"
          aria-labelledby=""
          className=""
          hasNoBodyWrapper={false}
          header={
            <React.Fragment>
              <Title
                headingLevel="h1"
                size="2xl"
              >
                Edit Metadata
              </Title>
            </React.Fragment>
          }
          isOpen={false}
          onClose={[Function]}
          ouiaSafe={true}
          showClose={true}
          title="Edit metadata"
          titleIconVariant={null}
          titleLabel=""
          variant="medium"
        >
          <div
            id="edit_metadata_helper_text"
          >
            <p>
              Editing 
              0
               items. Changes made apply to all selected docs.
            </p>
          </div>
          <br />
          <Form
            id="bulk_edit_metadata"
            isWidthLimited={true}
          >
            <FormGroup
              fieldId="product-name"
              isRequired={true}
              label="Product Name"
            >
              <InputGroup>
                <FormSelect
                  aria-label="FormSelect Product"
                  className=""
                  isDisabled={false}
                  isRequired={false}
                  name="product"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  ouiaSafe={true}
                  validated="default"
                  value=""
                >
                  <FormSelectOption
                    label="Select a Product"
                  />
                </FormSelect>
                <FormSelect
                  aria-label="FormSelect Version"
                  className=""
                  id="productVersion"
                  isDisabled={false}
                  isRequired={false}
                  name="productVersion"
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  ouiaSafe={true}
                  validated="default"
                  value=""
                >
                  <FormSelectOption
                    label="Select a Version"
                  />
                </FormSelect>
              </InputGroup>
            </FormGroup>
            <FormGroup
              fieldId="document-usecase"
              helperText="Explanations of document user cases included in documentation."
              isRequired={true}
              label="Document use case"
            >
              <FormSelect
                aria-label="FormSelect Usecase"
                className=""
                isDisabled={false}
                isRequired={false}
                name="useCase"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                ouiaSafe={true}
                validated="default"
                value=""
              >
                <FormSelectOption
                  key="usecase_0"
                  label="Select Use Case"
                  value="Select Use Case"
                />
                <FormSelectOption
                  key="usecase_1"
                  label="Administer"
                  value="Administer"
                />
                <FormSelectOption
                  key="usecase_2"
                  label="Deploy"
                  value="Deploy"
                />
                <FormSelectOption
                  key="usecase_3"
                  label="Develop"
                  value="Develop"
                />
                <FormSelectOption
                  key="usecase_4"
                  label="Install"
                  value="Install"
                />
                <FormSelectOption
                  key="usecase_5"
                  label="Migrate"
                  value="Migrate"
                />
                <FormSelectOption
                  key="usecase_6"
                  label="Monitor"
                  value="Monitor"
                />
                <FormSelectOption
                  key="usecase_7"
                  label="Network"
                  value="Network"
                />
                <FormSelectOption
                  key="usecase_8"
                  label="Plan"
                  value="Plan"
                />
                <FormSelectOption
                  key="usecase_9"
                  label="Provision"
                  value="Provision"
                />
                <FormSelectOption
                  key="usecase_10"
                  label="Release"
                  value="Release"
                />
                <FormSelectOption
                  key="usecase_11"
                  label="Troubleshoot"
                  value="Troubleshoot"
                />
                <FormSelectOption
                  key="usecase_12"
                  label="Optimize"
                  value="Optimize"
                />
              </FormSelect>
            </FormGroup>
            <FormGroup
              fieldId="url-fragment"
              helperText="Edit individually to set or change vanity URL."
              label="Vanity URL fragment"
            />
            <FormGroup
              fieldId="search-keywords"
              isRequired={false}
              label="Search keywords"
            >
              <InputGroup>
                <TextInput
                  id="search-keywords"
                  isRequired={false}
                  name="keywords"
                  onChange={[Function]}
                  placeholder="cat, dog, bird..."
                  type="text"
                  value=""
                />
              </InputGroup>
            </FormGroup>
            <div>
              <input
                name="productVersion@TypeHint"
                type="hidden"
                value="Reference"
              />
            </div>
          </Form>
        </Modal>
      </DrawerContentBody>
    </DrawerContent>
  </Drawer>
  <BuildInfo />
</Fragment>
`;
